// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// I can let url "" because I overwrote this in the new Prisma.PrismaClient()...
// To migrate the tables to the database test, I inserted in url: env("DATABASE_URL_TEST"),
// and executed the command prisma migrate dev.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum SessionRoom {
  IMAX
  XD
  COMMON
  DLUX
}

enum Classification {
  GENERAL_AUDIENCE
  PARENT_GUIDANCE_SUGGESTED
  RESTRICTED
}

enum SeatType {
  WHELLCHAIR
  STARDARD
  DOUBLESEAT
}

enum TicketCategory {
  FREE
  HALFPRICE
  STARDARD
  PROMOTIONAL
}

enum SeatStatus {
  AVAILABLE
  SELECTED
  BLOCKED
  OCCUPIED
}

model Movie {
  id             String         @id @default(uuid())
  name           String
  description    String
  classification Classification @default(GENERAL_AUDIENCE)
  duration       Int
  Session        Session[]
}

model Session {
  id          String        @id @default(uuid())
  room        SessionRoom   @default(COMMON)
  sessionDate String
  movie       Movie         @relation(fields: [movieId], references: [id])
  movieId     String
  price       Float
  SessionSeat SessionSeat[]
  Ticket      Ticket[]
}

model SessionSeat {
  id        String     @id @default(uuid())
  line      String
  column    Int
  name      String
  session   Session    @relation(fields: [sessionId], references: [id])
  sessionId String
  type      SeatType   @default(STARDARD)
  status    SeatStatus @default(AVAILABLE) // the seat is occupied by some user or not
  Ticket    Ticket[] // ? 
  // A ticket can be associated with one seat (created by one session),
  // but a seat (associated to one session), does not have many tickets. (check this out)
  // disable   Boolean    @default(false) // seat is disable or not (In seatStatus there's a BLOCKED)
}

model User {
  id        String   @id @default(uuid())
  role      Role     @default(USER)
  name      String
  birthDate String
  email     String   @unique
  password  String
  reviewer  Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createAt  DateTime @default(now())
  Ticket    Ticket[]
}

model Ticket {
  id            String         @id @default(uuid())
  session       Session        @relation(fields: [sessionId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  sessionId     String
  userId        String
  category      TicketCategory @default(STARDARD)
  paymentStatus Boolean        @default(false)
  seat          SessionSeat    @relation(fields: [sessionSeatId], references: [id])
  sessionSeatId String
}
